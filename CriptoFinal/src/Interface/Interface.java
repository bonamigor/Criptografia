/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import javax.swing.JOptionPane;

/**
 *
 * @author aluno
 */
public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldMensagemCD = new javax.swing.JTextField();
        jButtonCriptografar = new javax.swing.JButton();
        jButtonDecriptografar = new javax.swing.JButton();
        jTextFieldCriptografada = new javax.swing.JTextField();
        jTextFieldDecriptografada = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldMensagemD = new javax.swing.JTextField();
        jButtonLimpar = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tw Cen MT", 0, 36)); // NOI18N
        jLabel1.setText("MATRIX ENCRYPTION");

        jLabel2.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabel2.setText("Mensagem: ");

        jTextFieldMensagemCD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMensagemCDActionPerformed(evt);
            }
        });

        jButtonCriptografar.setText("CRIPTOGRAFAR");
        jButtonCriptografar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCriptografarActionPerformed(evt);
            }
        });

        jButtonDecriptografar.setText("DESCRIPTOGRAFAR");
        jButtonDecriptografar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecriptografarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabel3.setText("Mensagem Criptografada:");

        jButtonLimpar.setText("LIMPAR");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });

        jButtonSair.setText("SAIR");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMensagemCD))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonCriptografar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldCriptografada))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonDecriptografar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldDecriptografada)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldMensagemD)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(jButtonLimpar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSair)
                .addContainerGap(195, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(74, 74, 74))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldMensagemCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCriptografar)
                    .addComponent(jTextFieldCriptografada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldMensagemD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDecriptografar)
                    .addComponent(jTextFieldDecriptografada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLimpar)
                    .addComponent(jButtonSair))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCriptografarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCriptografarActionPerformed
        
        int [][] chave = new int [2][2];
        chave[0][0] = 2;
        chave[0][1] = 1;
        chave[1][0] = -1;
        chave[1][1] = 4;
        
        char [] Alfabeto = { ' ' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'X' , 'W' , 'Y' };
        
        String mensagemParaCodificar;
        
        
        mensagemParaCodificar = jTextFieldMensagemCD.getText();
        if(!mensagemParaCodificar.matches("[a-z A-Z]+")){
            JOptionPane.showMessageDialog(null, "Digite uma mensagem sem números ou caracteres inválidos!");
            
        }
        else{
        
        
        if(mensagemParaCodificar.length() % 2 != 0){
            mensagemParaCodificar += " ";
        }
        
        mensagemParaCodificar = mensagemParaCodificar.toUpperCase();
                
        int quantidadeDeLinhas = mensagemParaCodificar.length() / 2;
        
        int posicao1 = 0;
        int posicao2 = 1;
        
        int pares[][] = new int [quantidadeDeLinhas][2];
        
        for(int i=0; i < quantidadeDeLinhas; i++){
            
            char l1 = mensagemParaCodificar.charAt(posicao1);
            char l2 = mensagemParaCodificar.charAt(posicao2);
            
            int n1 = 0;
            int n2 = 0;
            
            for (int j = 0; j < Alfabeto.length; j++) {
               if(Alfabeto[j] == l1){
                   n1 = j;
               }
               if(Alfabeto[j] == l2){
                   n2 = j;
               }
            }
            
            pares[i][0] = n1;
            pares[i][1] = n2;
            
            posicao1+=2;
            posicao2+=2;
        }
        
        int valoresC [] = new int [pares.length*2];
        
        posicao1 = 0;
        posicao2 = 1;
        
        
        for(int i=0; i < pares.length; i++){
            
            int l0c0 = chave[0][0];
            int l0c1 = chave[0][1];
            int l1c0 = chave[1][0];
            int l1c1 = chave[1][1];
            
            int a = pares[i][0];
            int b = pares[i][1];
            
            int s1 = (a * chave[0][0]) + (b * chave[0][1]);
            int s2 = (a * chave[1][0]) + (b * chave[1][1]);
            
            int ns1 = 0;
            int ns2 = 0;
            
            if(s1 >= 26){
                ns1 = s1 % 26;
            }else if(s1 < 0){
                ns1 = s1 + 26;
            }else{
                ns1 = s1;
            }
            
            if(s2 >= 26){
                ns2 = s2 % 26;
            }else if(s2 < 0){
                ns2 = s2 + 26;
            }else{
                ns2 = s2;
            }
               
            valoresC[posicao1] = ns1;
            valoresC[posicao2] = ns2;
           
            posicao1+=2;
            posicao2+=2;
           
        }
        
        String criptografada = "";
      
        
        for (int i = 0; i < valoresC.length; i++) {
            int p = valoresC[i];
            criptografada += Alfabeto[p];
        }
        
        
        jTextFieldCriptografada.setText(criptografada);   
        }

    }//GEN-LAST:event_jButtonCriptografarActionPerformed

    private void jButtonDecriptografarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecriptografarActionPerformed
        int [][] chave = new int [2][2];
        chave[0][0] = 2;
        chave[0][1] = 1;
        chave[1][0] = -1;
        chave[1][1] = 4;
        
        char [] Alfabeto = { ' ' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'X' , 'W' , 'Y'};
        String criptografada;
        
        criptografada = jTextFieldMensagemD.getText();
        
        if(criptografada.length() % 2 != 0){
            criptografada += " ";
        }
        
        criptografada = criptografada.toUpperCase();
                
        int quantidadeDeLinhas = criptografada.length() / 2;
        
        int posicao1 = 0;
        int posicao2 = 1;
        
        int paresC[][] = new int [quantidadeDeLinhas][2];
        
        for(int i=0; i < quantidadeDeLinhas; i++){
            
            char l1 = criptografada.charAt(posicao1);
            char l2 = criptografada.charAt(posicao2);
            
            int n1 = 0;
            int n2 = 0;
            
            for (int j = 0; j < Alfabeto.length; j++) {
               if(Alfabeto[j] == l1){
                   n1 = j;
               }
               if(Alfabeto[j] == l2){
                   n2 = j;
               }
            }
            
            paresC[i][0] = n1;
            paresC[i][1] = n2;
            
            posicao1+=2;
            posicao2+=2;
        }
        
        int valoresC [] = new int [paresC.length*2];
        
        posicao1 = 0;
        posicao2 = 1;
        
        int [][] chaveI = new int [2][2];
        chaveI[0][0] = 4;
        chaveI[0][1] = -1;
        chaveI[1][0] = 1;
        chaveI[1][1] = 2;
        
        int [][] chaveInversa = new int [2][2];
        chaveInversa[0][0] = chaveI[0][0]*3;
        chaveInversa[0][1] = chaveI[0][1]*3;
        chaveInversa[1][0] = chaveI[1][0]*3;
        chaveInversa[1][1] = chaveI[1][1]*3;
        
        if(chaveInversa[0][0] < 0){
            chaveInversa[0][0] = chaveInversa[0][0] + 26;
        }
        else if(chaveInversa[0][1] < 0){
            chaveInversa[0][1] = chaveInversa[0][1] + 26;
        }
        else if(chaveInversa[1][0] < 0){
            chaveInversa[1][0] = chaveInversa[1][0] + 26;
        }
        else if(chaveInversa[1][1] < 0){
            chaveInversa[1][1] = chaveInversa[1][1] + 26;
        }
        else{
            
        }
        
        for(int i=0; i < paresC.length; i++){
            
            int l0c0 = chaveInversa[0][0];
            int l0c1 = chaveInversa[0][1];
            int l1c0 = chaveInversa[1][0];
            int l1c1 = chaveInversa[1][1];
            
            int a = paresC[i][0];
            int b = paresC[i][1];
            
            int s1 = (a * chaveInversa[0][0]) + (b * chaveInversa[0][1]);
            int s2 = (a * chaveInversa[1][0]) + (b * chaveInversa[1][1]);
            
            int ns1 = 0;
            int ns2 = 0;
            
            if(s1 >= 26){
                ns1 = s1 % 26;
            }else if(s1 < 0){
                ns1 = s1 + 26;
            }else{
                ns1 = s1;
            }
            
            if(s2 >= 26){
                ns2 = s2 % 26;
            }else if(s2 < 0){
                ns2 = s2 + 26;
            }else{
                ns2 = s2;
            }
               
            valoresC[posicao1] = ns1;
            valoresC[posicao2] = ns2;
           
            posicao1+=2;
            posicao2+=2;
           
        }
        
        String descriptografada = "";
      
        
        for (int i = 0; i < valoresC.length; i++) {
            int p = valoresC[i];
            descriptografada += Alfabeto[p];
        }
        
        
        jTextFieldDecriptografada.setText(descriptografada);
    }//GEN-LAST:event_jButtonDecriptografarActionPerformed

    private void jTextFieldMensagemCDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMensagemCDActionPerformed

    }//GEN-LAST:event_jTextFieldMensagemCDActionPerformed

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed
        jTextFieldDecriptografada.setText("");
        jTextFieldMensagemD.setText("");
        jTextFieldCriptografada.setText("");  
        jTextFieldMensagemCD.setText("");
    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonSairActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCriptografar;
    private javax.swing.JButton jButtonDecriptografar;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextFieldCriptografada;
    private javax.swing.JTextField jTextFieldDecriptografada;
    private javax.swing.JTextField jTextFieldMensagemCD;
    private javax.swing.JTextField jTextFieldMensagemD;
    // End of variables declaration//GEN-END:variables
}
